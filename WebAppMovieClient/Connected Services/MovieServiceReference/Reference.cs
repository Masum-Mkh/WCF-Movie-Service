//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAppMovieClient.MovieServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movie", Namespace="http://schemas.datacontract.org/2004/07/MovieService")]
    [System.SerializableAttribute()]
    public partial class Movie : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTimeOffset> RealeaseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Director {
            get {
                return this.DirectorField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectorField, value) != true)) {
                    this.DirectorField = value;
                    this.RaisePropertyChanged("Director");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTimeOffset> RealeaseDate {
            get {
                return this.RealeaseDateField;
            }
            set {
                if ((this.RealeaseDateField.Equals(value) != true)) {
                    this.RealeaseDateField = value;
                    this.RaisePropertyChanged("RealeaseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MovieServiceReference.IMovieRepository")]
    public interface IMovieRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/GetMovies", ReplyAction="http://tempuri.org/IMovieRepository/GetMoviesResponse")]
        System.Collections.Generic.List<WebAppMovieClient.MovieServiceReference.Movie> GetMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/GetMovies", ReplyAction="http://tempuri.org/IMovieRepository/GetMoviesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WebAppMovieClient.MovieServiceReference.Movie>> GetMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/GetMovie", ReplyAction="http://tempuri.org/IMovieRepository/GetMovieResponse")]
        WebAppMovieClient.MovieServiceReference.Movie GetMovie(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/GetMovie", ReplyAction="http://tempuri.org/IMovieRepository/GetMovieResponse")]
        System.Threading.Tasks.Task<WebAppMovieClient.MovieServiceReference.Movie> GetMovieAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/SaveMovie", ReplyAction="http://tempuri.org/IMovieRepository/SaveMovieResponse")]
        WebAppMovieClient.MovieServiceReference.Movie SaveMovie(WebAppMovieClient.MovieServiceReference.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/SaveMovie", ReplyAction="http://tempuri.org/IMovieRepository/SaveMovieResponse")]
        System.Threading.Tasks.Task<WebAppMovieClient.MovieServiceReference.Movie> SaveMovieAsync(WebAppMovieClient.MovieServiceReference.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/UpdateMovie", ReplyAction="http://tempuri.org/IMovieRepository/UpdateMovieResponse")]
        WebAppMovieClient.MovieServiceReference.Movie UpdateMovie(WebAppMovieClient.MovieServiceReference.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/UpdateMovie", ReplyAction="http://tempuri.org/IMovieRepository/UpdateMovieResponse")]
        System.Threading.Tasks.Task<WebAppMovieClient.MovieServiceReference.Movie> UpdateMovieAsync(WebAppMovieClient.MovieServiceReference.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/DeleteMovie", ReplyAction="http://tempuri.org/IMovieRepository/DeleteMovieResponse")]
        WebAppMovieClient.MovieServiceReference.Movie DeleteMovie(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieRepository/DeleteMovie", ReplyAction="http://tempuri.org/IMovieRepository/DeleteMovieResponse")]
        System.Threading.Tasks.Task<WebAppMovieClient.MovieServiceReference.Movie> DeleteMovieAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMovieRepositoryChannel : WebAppMovieClient.MovieServiceReference.IMovieRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MovieRepositoryClient : System.ServiceModel.ClientBase<WebAppMovieClient.MovieServiceReference.IMovieRepository>, WebAppMovieClient.MovieServiceReference.IMovieRepository {
        
        public MovieRepositoryClient() {
        }
        
        public MovieRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MovieRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<WebAppMovieClient.MovieServiceReference.Movie> GetMovies() {
            return base.Channel.GetMovies();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WebAppMovieClient.MovieServiceReference.Movie>> GetMoviesAsync() {
            return base.Channel.GetMoviesAsync();
        }
        
        public WebAppMovieClient.MovieServiceReference.Movie GetMovie(int id) {
            return base.Channel.GetMovie(id);
        }
        
        public System.Threading.Tasks.Task<WebAppMovieClient.MovieServiceReference.Movie> GetMovieAsync(int id) {
            return base.Channel.GetMovieAsync(id);
        }
        
        public WebAppMovieClient.MovieServiceReference.Movie SaveMovie(WebAppMovieClient.MovieServiceReference.Movie movie) {
            return base.Channel.SaveMovie(movie);
        }
        
        public System.Threading.Tasks.Task<WebAppMovieClient.MovieServiceReference.Movie> SaveMovieAsync(WebAppMovieClient.MovieServiceReference.Movie movie) {
            return base.Channel.SaveMovieAsync(movie);
        }
        
        public WebAppMovieClient.MovieServiceReference.Movie UpdateMovie(WebAppMovieClient.MovieServiceReference.Movie movie) {
            return base.Channel.UpdateMovie(movie);
        }
        
        public System.Threading.Tasks.Task<WebAppMovieClient.MovieServiceReference.Movie> UpdateMovieAsync(WebAppMovieClient.MovieServiceReference.Movie movie) {
            return base.Channel.UpdateMovieAsync(movie);
        }
        
        public WebAppMovieClient.MovieServiceReference.Movie DeleteMovie(int id) {
            return base.Channel.DeleteMovie(id);
        }
        
        public System.Threading.Tasks.Task<WebAppMovieClient.MovieServiceReference.Movie> DeleteMovieAsync(int id) {
            return base.Channel.DeleteMovieAsync(id);
        }
    }
}
